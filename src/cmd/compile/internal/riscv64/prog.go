package riscv64

import (
	"cmd/compile/internal/gc"
	"cmd/internal/obj"
	"cmd/internal/obj/riscv64"
)

// This table gives the basic information about instruction generated by the
// compiler and processed in the optimizer.  Instructions not generated may be
// omitted.
//
// NOTE(prattmic): I believe that the gc.Size flags are used only for non-SSA
// peephole optimizations, and can thus be omitted for RISCV.
var progmap = map[obj.As]gc.ProgInfo{
	obj.ATYPE:     {Flags: gc.Pseudo | gc.Skip},
	obj.ATEXT:     {Flags: gc.Pseudo},
	obj.AFUNCDATA: {Flags: gc.Pseudo},
	obj.APCDATA:   {Flags: gc.Pseudo},
	obj.AUNDEF:    {Flags: gc.Break},
	obj.AUSEFIELD: {Flags: gc.OK},
	obj.AVARDEF:   {Flags: gc.Pseudo | gc.RightWrite},
	obj.AVARKILL:  {Flags: gc.Pseudo | gc.RightWrite},
	obj.AVARLIVE:  {Flags: gc.Pseudo | gc.LeftRead},
	obj.ARET:      {Flags: gc.Break},
	obj.AJMP:      {Flags: gc.Jump | gc.Break | gc.KillCarry},
	obj.ACALL:     {Flags: gc.RightAddr | gc.Call | gc.KillCarry},

	// NOP is an internal no-op that also stands for USED and SET
	// annotations.
	obj.ANOP: {Flags: gc.LeftRead | gc.RightWrite},

	// 2.5: Control Transfer Instructions
	riscv64.ABEQ:  {Flags: gc.Cjmp | gc.LeftRead | gc.RegRead},
	riscv64.ABNE:  {Flags: gc.Cjmp | gc.LeftRead | gc.RegRead},
	riscv64.ABLT:  {Flags: gc.Cjmp | gc.LeftRead | gc.RegRead},
	riscv64.ABLTU: {Flags: gc.Cjmp | gc.LeftRead | gc.RegRead},
	riscv64.ABGE:  {Flags: gc.Cjmp | gc.LeftRead | gc.RegRead},
	riscv64.ABGEU: {Flags: gc.Cjmp | gc.LeftRead | gc.RegRead},

	// 2.9: Environment Call and Breakpoints
	riscv64.AECALL:  {Flags: gc.OK},
	riscv64.AEBREAK: {Flags: gc.OK},

	// 4.2: Integer Computational Instructions
	riscv64.AADDI:  {Flags: gc.LeftRead | gc.RightWrite},
	riscv64.ASLTI:  {Flags: gc.LeftRead | gc.RightWrite},
	riscv64.ASLTIU: {Flags: gc.LeftRead | gc.RightWrite},
	riscv64.ASEQZ:  {Flags: gc.LeftRead | gc.RightWrite},
	riscv64.AANDI:  {Flags: gc.LeftRead | gc.RightWrite},
	riscv64.AORI:   {Flags: gc.LeftRead | gc.RightWrite},
	riscv64.AXORI:  {Flags: gc.LeftRead | gc.RightWrite},
	riscv64.ASLLI:  {Flags: gc.LeftRead | gc.RightWrite},
	riscv64.ASRLI:  {Flags: gc.LeftRead | gc.RightWrite},
	riscv64.ASRAI:  {Flags: gc.LeftRead | gc.RightWrite},
	riscv64.AADD:   {Flags: gc.LeftRead | gc.RegRead | gc.RightWrite},
	riscv64.ASLT:   {Flags: gc.LeftRead | gc.RegRead | gc.RightWrite},
	riscv64.ASLTU:  {Flags: gc.LeftRead | gc.RegRead | gc.RightWrite},
	riscv64.ASNEZ:  {Flags: gc.LeftRead | gc.RightWrite},
	riscv64.AAND:   {Flags: gc.LeftRead | gc.RegRead | gc.RightWrite},
	riscv64.AOR:    {Flags: gc.LeftRead | gc.RegRead | gc.RightWrite},
	riscv64.AXOR:   {Flags: gc.LeftRead | gc.RegRead | gc.RightWrite},
	riscv64.ASLL:   {Flags: gc.LeftRead | gc.RegRead | gc.RightWrite},
	riscv64.ASRL:   {Flags: gc.LeftRead | gc.RegRead | gc.RightWrite},
	riscv64.ASUB:   {Flags: gc.LeftRead | gc.RegRead | gc.RightWrite},
	riscv64.ASRA:   {Flags: gc.LeftRead | gc.RegRead | gc.RightWrite},

	// 4.3: Load and Store Instructions
	riscv64.ALD:    {Flags: gc.LeftRead | gc.RightWrite | gc.Move},
	riscv64.ASD:    {Flags: gc.LeftRead | gc.RightWrite | gc.Move},
	riscv64.AMOV:   {Flags: gc.LeftRead | gc.RightWrite | gc.Move},
	riscv64.AMOVW:  {Flags: gc.LeftRead | gc.RightWrite | gc.Move},
	riscv64.AMOVWU: {Flags: gc.LeftRead | gc.RightWrite | gc.Move},
	riscv64.AMOVH:  {Flags: gc.LeftRead | gc.RightWrite | gc.Move},
	riscv64.AMOVHU: {Flags: gc.LeftRead | gc.RightWrite | gc.Move},
	riscv64.AMOVB:  {Flags: gc.LeftRead | gc.RightWrite | gc.Move},
	riscv64.AMOVBU: {Flags: gc.LeftRead | gc.RightWrite | gc.Move},

	// 5.1: Multiplication Operations
	riscv64.AMUL:   {Flags: gc.LeftRead | gc.RegRead | gc.RightWrite},
	riscv64.AMULH:  {Flags: gc.LeftRead | gc.RegRead | gc.RightWrite},
	riscv64.AMULHU: {Flags: gc.LeftRead | gc.RegRead | gc.RightWrite},
	riscv64.AMULW:  {Flags: gc.LeftRead | gc.RegRead | gc.RightWrite},
	riscv64.ADIV:   {Flags: gc.LeftRead | gc.RegRead | gc.RightWrite},
	riscv64.ADIVU:  {Flags: gc.LeftRead | gc.RegRead | gc.RightWrite},
	riscv64.AREM:   {Flags: gc.LeftRead | gc.RegRead | gc.RightWrite},
	riscv64.AREMU:  {Flags: gc.LeftRead | gc.RegRead | gc.RightWrite},
	riscv64.ADIVW:  {Flags: gc.LeftRead | gc.RegRead | gc.RightWrite},
	riscv64.ADIVUW: {Flags: gc.LeftRead | gc.RegRead | gc.RightWrite},
	riscv64.AREMW:  {Flags: gc.LeftRead | gc.RegRead | gc.RightWrite},
	riscv64.AREMUW: {Flags: gc.LeftRead | gc.RegRead | gc.RightWrite},

	// 7.5: Single-Precision Load and Store Instructions
	riscv64.AMOVF: {Flags: gc.LeftRead | gc.RightWrite | gc.Move},

	// 7.6: Single-Precision Floating-Point Computational Instructions
	riscv64.AFADDS:  {Flags: gc.LeftRead | gc.RegRead | gc.RightWrite},
	riscv64.AFSUBS:  {Flags: gc.LeftRead | gc.RegRead | gc.RightWrite},
	riscv64.AFMULS:  {Flags: gc.LeftRead | gc.RegRead | gc.RightWrite},
	riscv64.AFDIVS:  {Flags: gc.LeftRead | gc.RegRead | gc.RightWrite},
	riscv64.AFSQRTS: {Flags: gc.LeftRead | gc.RightWrite},

	// 7.7: Single-Precision Floating-Point Conversion and Move Instructions
	riscv64.AFSGNJS:  {Flags: gc.LeftRead | gc.RegRead | gc.RightWrite},
	riscv64.AFSGNJNS: {Flags: gc.LeftRead | gc.RegRead | gc.RightWrite},
	riscv64.AFNEGS:   {Flags: gc.LeftRead | gc.RightWrite},
	riscv64.AFSGNJXS: {Flags: gc.LeftRead | gc.RegRead | gc.RightWrite},
	riscv64.AFCVTWS:  {Flags: gc.LeftRead | gc.RightWrite},
	riscv64.AFCVTLS:  {Flags: gc.LeftRead | gc.RightWrite},
	riscv64.AFCVTSW:  {Flags: gc.LeftRead | gc.RightWrite},
	riscv64.AFCVTSL:  {Flags: gc.LeftRead | gc.RightWrite},
	riscv64.AFMVSX:   {Flags: gc.LeftRead | gc.RightWrite},

	// 7.8: Single-Precision Floating-Point Compare Instructions
	riscv64.AFEQS: {Flags: gc.LeftRead | gc.RegRead | gc.RightWrite},
	riscv64.AFNES: {Flags: gc.LeftRead | gc.RegRead | gc.RightWrite},
	riscv64.AFLTS: {Flags: gc.LeftRead | gc.RegRead | gc.RightWrite},
	riscv64.AFLES: {Flags: gc.LeftRead | gc.RegRead | gc.RightWrite},

	// 8.2: Double-Precision Load and Store Instructions
	riscv64.AMOVD: {Flags: gc.LeftRead | gc.RightWrite | gc.Move},

	// 8.3: Double-Precision Floating-Point Computational Instructions
	riscv64.AFADDD:  {Flags: gc.LeftRead | gc.RegRead | gc.RightWrite},
	riscv64.AFSUBD:  {Flags: gc.LeftRead | gc.RegRead | gc.RightWrite},
	riscv64.AFMULD:  {Flags: gc.LeftRead | gc.RegRead | gc.RightWrite},
	riscv64.AFDIVD:  {Flags: gc.LeftRead | gc.RegRead | gc.RightWrite},
	riscv64.AFSQRTD: {Flags: gc.LeftRead | gc.RightWrite},

	// 8.4: Double-Precision Floating-Point Conversion and Move Instructions
	riscv64.AFSGNJD:  {Flags: gc.LeftRead | gc.RegRead | gc.RightWrite},
	riscv64.AFSGNJND: {Flags: gc.LeftRead | gc.RegRead | gc.RightWrite},
	riscv64.AFNEGD:   {Flags: gc.LeftRead | gc.RightWrite},
	riscv64.AFSGNJXD: {Flags: gc.LeftRead | gc.RegRead | gc.RightWrite},
	riscv64.AFCVTWD:  {Flags: gc.LeftRead | gc.RightWrite},
	riscv64.AFCVTLD:  {Flags: gc.LeftRead | gc.RightWrite},
	riscv64.AFCVTDW:  {Flags: gc.LeftRead | gc.RightWrite},
	riscv64.AFCVTDL:  {Flags: gc.LeftRead | gc.RightWrite},
	riscv64.AFCVTSD:  {Flags: gc.LeftRead | gc.RightWrite},
	riscv64.AFCVTDS:  {Flags: gc.LeftRead | gc.RightWrite},
	riscv64.AFMVDX:   {Flags: gc.LeftRead | gc.RightWrite},

	// 8.5: Double-Precision Floating-Point Compare Instructions
	riscv64.AFEQD: {Flags: gc.LeftRead | gc.RegRead | gc.RightWrite},
	riscv64.AFNED: {Flags: gc.LeftRead | gc.RegRead | gc.RightWrite},
	riscv64.AFLTD: {Flags: gc.LeftRead | gc.RegRead | gc.RightWrite},
	riscv64.AFLED: {Flags: gc.LeftRead | gc.RegRead | gc.RightWrite},
}

func proginfo(p *obj.Prog) gc.ProgInfo {
	info, ok := progmap[p.As]
	if !ok {
		gc.Fatalf("proginfo missing prog %v", p.As)
	}

	return info
}
